-- MySQL dump 10.13  Distrib 8.0.19, for osx10.15 (x86_64)
--
-- Host: localhost    Database: kyopro_app_development
-- ------------------------------------------------------
-- Server version	8.0.19

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `ar_internal_metadata`
--

DROP TABLE IF EXISTS `ar_internal_metadata`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ar_internal_metadata` (
  `key` varchar(255) NOT NULL,
  `value` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ar_internal_metadata`
--

LOCK TABLES `ar_internal_metadata` WRITE;
/*!40000 ALTER TABLE `ar_internal_metadata` DISABLE KEYS */;
INSERT INTO `ar_internal_metadata` VALUES ('environment','development','2020-04-30 00:36:54','2020-04-30 00:36:54');
/*!40000 ALTER TABLE `ar_internal_metadata` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `articles`
--

DROP TABLE IF EXISTS `articles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `articles` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `body` text NOT NULL,
  `user_id` bigint NOT NULL,
  `category_id` bigint NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_articles_on_user_id` (`user_id`),
  KEY `index_articles_on_category_id` (`category_id`),
  CONSTRAINT `fk_rails_3d31dad1cc` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `fk_rails_af09d53ead` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `articles`
--

LOCK TABLES `articles` WRITE;
/*!40000 ALTER TABLE `articles` DISABLE KEYS */;
INSERT INTO `articles` VALUES (2,'挿入ソート','# 概要\r\n\r\n挿入ソート（インサーションソート）は、ソートのアルゴリズムの一つ。整列してある配列に追加要素を適切な場所に挿入すること。平均計算時間・最悪計算時間がともにO(n^2)と遅いが、アルゴリズムが単純で実装が容易なため、しばしば用いられる。\r\n\r\n安定な内部ソート。基本挿入法ともいう。in-placeアルゴリズムであり、オンラインアルゴリズムである。挿入ソートを高速化したソート法として、シェルソートが知られている。\r\n\r\n# アルゴリズム\r\n\r\nまず0番目と1番目の要素を比較し、順番が逆であれば入れ換える。次に、2番目の要素が1番目までの要素より小さい場合、正しい順に並ぶように「挿入」する（配列の場合、前の要素を後ろに一つずつずらす）。\r\n\r\nこの操作で、2番目までのデータが整列済みとなる（ただし、さらにデータが挿入される可能性があるので確定ではない）。このあと、3番目以降の要素について、整列済みデータとの比較と適切な位置への挿入を繰り返す。\r\n\r\n### C言語による実装\r\n```c\r\nfor (i = 1; i < n; i++) {\r\n    tmp = data[i];\r\n    if (data[i - 1] > tmp) {\r\n        j = i;\r\n        do {\r\n            data[j] = data[j - 1];\r\n            j--;\r\n        } while (j > 0 && data[j - 1] > tmp);\r\n        data[j] = tmp;\r\n    }\r\n}\r\n```',1,2,'2020-04-30 04:46:04','2020-05-09 18:46:04'),(3,'バブルソート','# 概要\r\nバブルソート (bubble sort) は、ソートのアルゴリズムの一つ。隣り合う要素の大小を比較しながら整列させること。最悪計算時間がO(n2)と遅いが、アルゴリズムが単純で実装が容易なため、また並列処理との親和性が高いことから、しばしば用いられる。安定な内部ソート。基本交換法、隣接交換法ともいう[1]。（単に交換法と言う場合もある）\r\n\r\n# アルゴリズム\r\n全ての要素に関して、隣接する要素と比較し順序が逆であれば入れ替える。これを要素数-1回繰り返すことでソートを行なう。なおこの繰り返しは、入れ替えが起こらなくなった時点で（それ以降は何度繰り返しても変化が起こらなくなるので）中断することができる。\r\n\r\nこの「全ての要素に関して」において、全ての要素に関して比較交換が行なわれるならば順序を問わない特徴を持つ。この特徴により、比較交換順序を調整することで効率化されたアルゴリズムが多数派生している。そのため他の様々なソートアルゴリズムの基礎として一度は学ばされるアルゴリズムとなっている。\r\n\r\n例えば前記の特徴によりバブルソートは並列処理と親和性が高く、比較交換器を潤沢に用いることで比較交換順序を調整したハードウェア実装では時間計算量はO(n)になる。この並列処理向けに比較交換順序を調整したアルゴリズムとして奇偶転置ソートがある。\r\n\r\nまた特にソフトウェアで実装される場合には一般に先頭から順に順次処理されるものなので、逆に先頭から順に順次処理されることを利用して不要なことが自明な比較交換をしないように効率化することは有効かつ直感的であり、この効率化されたアルゴリズムをもってバブルソートと呼ぶ場合もある。さらに、比較交換順序を逆順にすることで自明な比較交換を検出し易くしたアルゴリズムに挿入ソートがあり、効率化されたバブルソートは簡単な変更で容易に挿入ソートにできることから、ソートのソフトウェア実装としてバブルソートを選択する根拠はなく、学習専用の非効率的なアルゴリズムと考えられているのが現状である。\r\n\r\nなお、係る派生したアルゴリズムが隣接する要素と比較交換以外の比較や交換を行なうことで効率化を図っている場合、安定という特徴を失う。\r\n\r\n以下では、前記の自明な比較交換をしないように効率化されたバブルソートに関して解説する。\r\n\r\n要素の1番目と2番目を比較し、順番が逆であれば入れ換える。次に2番目と3番目を比較して入れ換える。これを最後まで行うと、最後の数だけが最小または最大の数として確定するので、確定していない部分について1つずつ減らしながら繰り返す。\r\n\r\n```cpp\r\nprocedure bubbleSort( A : list of sortable items ) defined as:\r\n  for each i in 1 to length(A) - 1 do:\r\n       for each j in 2 to length(A) - i + 1 do:\r\n         if A[ j ] < A[ j - 1 ] then\r\n           swap( A[ j ],  A[ j - 1 ] )\r\n         end if\r\n       end for\r\n  end for\r\nend procedure\r\n```',2,2,'2020-04-30 06:47:36','2020-05-07 12:31:22'),(4,'ナップザック問題','ナップサック問題（ナップサックもんだい、Knapsack problem）は、計算複雑性理論における計算の難しさの議論の対象となる問題の一つで、「容量 C のナップサックが一つと、n 種類の品物（各々、価値 pi, 容積 ci）が与えられたとき、ナップサックの容量 C を超えない範囲でいくつかの品物をナップサックに詰め、ナップサックに入れた品物の価値の和を最大化するにはどの品物を選べばよいか」という整数計画問題である。同じ種類の品物を1つまでしか入れられない場合（xi ∈ {0, 1}）や、同じ品物をいくつでも入れてよい場合（xi ∈ 0以上の整数）など、いくつかのバリエーションが存在する。\r\n\r\n決定問題としてのナップサック問題は、「C, pi, ci のほかに価値の合計の目標 V が与えられたとき、容量 C 以内でナップサック内の品物の価値の合計が V 以上になるような品物の選び方はあるか」を判定することである。 全ての品物について pi = ci が成り立つとき、部分和問題と等価であるため、ナップサック問題は部分和問題を一般化したものといえる。ナップサック問題は、（部分和問題もそうだが）NP困難と呼ばれる問題のクラスに属する。なお、部分和問題は同時にNP完全(NPかつNP困難)と呼ばれるクラスにも属する。\r\n\r\n動的計画法を用いた擬多項式時間アルゴリズムや FPTAS の存在が知られているため、実用的には、ほぼ最適解を得られる。',1,4,'2020-05-01 05:36:43','2020-05-07 13:01:17'),(5,'部分和問題','部分和問題（ぶぶんわもんだい）は、計算複雑性理論・暗号理論における問題で、与えられた n 個の整数 a1,...,an から部分集合をうまく選んで、その集合内の数の和が与えられた数 N に等しくなるようにできるかどうかを判定する問題である。NP完全であることが知られている。\r\n\r\n部分和問題は、分割問題 (Number Partitioning) の一般形でもある。分割問題とは、与えられた n 個の整数 a1,...,an を二つの集合に分け、各々の集合内の数の和がもう一方の集合内の数の和と等しくなるようにできるかどうかを判定する問題である。分割問題も、NP完全であることが示されている。\r\n\r\nたとえば、「{1,3,7,10,13} の部分和で、和が 21 になるものは存在するか？」であれば存在する（{1,7,13}である）、が答えである。また「{2,4,6,8,10} の部分和で、和が 19 になるものは存在するか？」であれば、存在しない（どんな部分和も偶数にしかならない）、が答えである。\r\n\r\n\r\n部分和問題は、ナップサック問題に含まれるため、動的計画法等の手法で解くことができる。',1,4,'2020-05-01 05:42:20','2020-05-01 05:42:20'),(6,'最長共通部分列問題','最長共通部分列問題（さいちょうきょうつうぶぶんれつもんだい、英: Longest-common subsequence problem, LCS）とは、与えられた列の集合（しばしば、2つの列からなる集合）の最長共通部分列を見つけ出す問題である。（ここで部分列(subsequence)は、部分文字列(substring)とは異なることに注意する。前者は元の列の連続した項からなる必要はない。）\r\n\r\n例えば、「ABCX」と「AYBZC」との最長共通部分列は「ABC」である。この問題は計算機科学における古典的問題であり、diff などのファイル比較プログラムの基礎をなし、バイオインフォマティクスにも応用されている。',1,4,'2020-05-01 06:20:59','2020-05-07 13:02:19'),(7,'レーベルシュタイン距離','レーベンシュタイン距離（レーベンシュタインきょり、英: Levenshtein distance）は、二つの文字列がどの程度異なっているかを示す距離の一種である。編集距離（へんしゅうきょり、英: edit distance）とも呼ばれる。具体的には、1文字の挿入・削除・置換によって、一方の文字列をもう一方の文字列に変形するのに必要な手順の最小回数として定義される[1]。名称は、1965年にこれを考案したロシアの学者ウラジーミル・レーベンシュタイン (露: Влади́мир Левенште́йн) にちなむ。\r\n\r\nレーベンシュタイン距離は、同じ文字数の単語に対する置換編集に使われているハミング距離の一般化であると見なすことが可能である。レーベンシュタイン距離の更なる一般化として、例えば一回の操作で二文字を変換する等の方法が考えられる。',1,4,'2020-05-01 06:24:20','2020-05-01 06:24:20'),(8,'幅優先探索','幅優先探索（はばゆうせんたんさく、英: breadth first search）はグラフ理論(Graph theory)において木構造(tree structure)やグラフ(graph)の探索に用いられるアルゴリズム。アルゴリズムは根ノードで始まり隣接した全てのノードを探索する。それからこれらの最も近いノードのそれぞれに対して同様のことを繰り返して探索対象ノードをみつける。「横型探索」とも言われる。\r\n\r\n幅優先探索は解を探すために、グラフの全てのノードを網羅的に展開・検査する。最良優先探索とは異なり、ノード探索にヒューリスティクスを使わずに、グラフ全体を目的のノードがみつかるまで、目的のノードに接近しているかどうかなどは考慮せず探索する。\r\n\r\n# アルゴリズム\r\n1. 根ノードを空のキューに加える。\r\n2. ノードをキューの先頭から取り出し、以下の処理を行う。\r\n    - ノードが探索対象であれば、探索をやめ結果を返す。\r\n    - そうでない場合、ノードの子で未探索のものを全てキューに追加する。\r\n3. もしキューが空ならば、グラフ内の全てのノードに対して処理が行われたので、探索をやめ\"not found\"と結果を返す。\r\n4. 2に戻る。\r\n\r\nノードの展開により得られる子ノードはキューに追加される。訪問済みの管理は配列やセットなどでも行える。',1,5,'2020-05-01 10:20:58','2020-05-07 13:14:01'),(9,'深さ優先探索','深さ優先探索（ふかさゆうせんたんさく、英: depth-first search, DFS、バックトラック法ともいう）は、木やグラフを探索するためのアルゴリズムである。アルゴリズムは根から(グラフの場合はどのノードを根にするか決定する)始まり、バックトラックするまで可能な限り探索を行う。「縦型探索」とも呼ばれる。\r\n\r\n# 概要\r\n形式的には、深さ優先探索は、探索対象となる木の最初のノードから、目的のノードが見つかるか子のないノードに行き着くまで、深く伸びていく探索である。その後はバックトラックして、最も近くの探索の終わっていないノードまで戻る。非再帰的な実装では、新しく見つかったノードはスタックに貯める。\r\n\r\n深さ優先探索の空間計算量は幅優先探索の空間計算量より最悪のケースでは同じだが一般的なケースではずっと小さい。また、探索の種類によっては、分岐を選択するためのヒューリスティックな方法にも向いている。両者の時間計算量は、最悪のケースではノード数とたどる辺の数の合計に比例する。',1,5,'2020-05-01 10:22:10','2020-05-07 13:18:12'),(10,'ダイクストラ法','ダイクストラ法（だいくすとらほう、英: Dijkstra\'s algorithm）はグラフ理論における辺の重みが非負数の場合の単一始点最短経路問題を解くための最良優先探索によるアルゴリズムである。辺の重みに負数を含む場合はベルマン-フォード法などが使える。\r\n\r\n辺の重みが全て同一の非負数の場合は幅優先探索が速く、線形時間で最短路を計算可能である。また、無向グラフで辺の重みが正整数の場合は、Thorupのアルゴリズム[1]によって線形時間での計算が可能であるが、実用性はあまり高くない。\r\n\r\n# 概要\r\nダイクストラ法はグラフ上の2頂点間の最短経路を求めるアルゴリズムで、1959年エドガー・ダイクストラによって考案された。 応用範囲は広くOSPFなどのインターネットルーティングプロトコルや、カーナビの経路探索や鉄道の経路案内においても利用されている。 \r\n\r\nなお最短経路長の推定値を事前に知っているときは、ダイクストラ法の改良版であるA*アルゴリズムを用いて、より効率的に最短経路を求めることができる。',1,6,'2020-05-01 10:23:44','2020-05-09 16:54:22'),(11,'プリム法','プリム法とは、グラフ理論で重み付き連結グラフの最小全域木を求める最適化問題のアルゴリズムである。全域木（対象となるグラフの全頂点を含む辺の部分集合で構成される木）のうち、その辺群の重みの総和が最小となる木を求めるものである。\r\n\r\nこのアルゴリズムは1930年に数学者 Vojtěch Jarník が発見し、1957年に計算機科学者ロバート・C・プリムが独自に発見、さらに1959年にはエドガー・ダイクストラが再発見しダイクストラ法の論文に記載している。\r\n\r\nそのため、DJP法、Jarník法、Prim-Jarník法などとも呼ばれることがある。アルゴリズムの発想や計算量は同時期に発表されたダイクストラ法に類似している。',1,6,'2020-05-01 10:24:48','2020-05-07 13:39:47'),(12,'ワーシャル–フロイド法','ワーシャル–フロイド法（英: Warshall–Floyd Algorithm）は、重み付き有向グラフの全ペアの最短経路問題を多項式時間で解くアルゴリズムである。\r\n\r\n名称は考案者であるスティーブン・ワーシャル（英語版）とロバート・フロイドにちなむ（2人はそれぞれ独立に考案）。フロイドのアルゴリズム、ワーシャルのアルゴリズム、フロイド–ワーシャル法とも呼ばれる。',1,6,'2020-05-01 10:26:06','2020-05-07 13:40:09'),(13,'クラスカル法','クラスカル法（英: Kruskal\'s algorithm）は、グラフ理論において重み付き連結グラフの最小全域木を求める最適化問題のアルゴリズムである。',1,6,'2020-05-01 10:26:47','2020-05-01 10:26:47'),(14,'二分探索木','二分探索木（にぶんたんさくぎ、英: binary search tree）は、コンピュータプログラムにおいて、「左の子孫の値 ≤ 親の値 ≤ 右の子孫の値」という制約を持つ二分木である。探索木のうちで最も基本的な木構造である。\r\n\r\n# 構造\r\n構造は二分木と同じだが、「左の子孫の値 ≤ 親 ≤ 右の子孫の値」という制約を持つ。左の子孫の値と右の子孫の値の両方に等号をつけているが、実際にはどちらかに統一しておく必要がある。\r\n\r\n平衡（左右のバランスがとれている状態）している状態では木の高さは log2 N となる。ただし最悪の場合は、事実上の 線形リスト になり、木の高さは N となる。木の形は挿入時のデータ出現順序に依存し、特にソート済みのデータを与えると線形リストになる点は注意を要する。データの出現順序によって大きく性能が劣化しないように、挿入・削除の際に木の平衡を取り直す処理を追加した二分探索木は平衡二分探索木と呼ばれる。',1,3,'2020-05-01 10:28:02','2020-05-07 12:53:08'),(15,'ヒープ','ヒープ（英: heap）とは、「子要素は親要素より常に大きいか等しい（または常に小さいか等しい）」という制約を持つ木構造の事。単に「ヒープ」という場合、二分木を使った二分ヒープを指すことが多いため、そちらを参照すること。\r\n\r\n# 概要\r\nヒープは最小値（または最大値）を求めるのに適した木構造の一種であり、「子要素は親要素より常に大きいか等しい（または常に小さいか等しい）」という制約を持つ。子要素が複数ある場合、子要素間の大小関係に制約はない。\r\n\r\nフィボナッチヒープの場合、挿入や最小値検索やマージが一定償却時間で行え、削除は O(log n) で行える。\r\n\r\n優先度付きキューの実装としても使われる。プリム法やダイクストラ法などのグラフ問題のアルゴリズムでも使われている。',1,3,'2020-05-01 10:28:43','2020-05-07 12:58:21'),(16,'線形探索','# 概要\r\n線形探索（せんけいたんさく、英: linear search, sequential search）は、検索のアルゴリズムの一つ。 \r\n\r\nリストや配列に入ったデータに対する検索を行うにあたって、 先頭から順に比較を行い、それが見つかれば終了する。\r\n# プログラミング例\r\n```c\r\nint\r\nfind(\r\n    int array[],\r\n    int array_size,\r\n    int value)\r\n{\r\n    int i;\r\n    for (i = 0; i < array_size; ++i)\r\n    {\r\n        if (array[i] == value) { return i; }\r\n    }\r\n    return -1;\r\n}\r\n```',1,1,'2020-05-01 10:30:04','2020-05-07 12:45:02'),(17,'二分探索','二分探索（にぶんたんさく、英: binary search、BS）やバイナリサーチとは、ソート済み配列に対する探索アルゴリズムの一つ。\r\n\r\n# 概要\r\nソート済みのリストや配列に入ったデータ（同一の値はないものとする）に対する検索を行うにあたって、 中央の値を見て、検索したい値との大小関係を用いて、検索したい値が中央の値の右にあるか、左にあるかを判断して、片側には存在しないことを確かめながら検索していく。\r\n\r\n大小関係を用いるため、未ソートのリストや大小関係の定義されない要素を含むリストには二分探索を用いることはできない。\r\n\r\nn個のデータの中央の値を見ることで、1回の操作でn/2個程度（奇数の場合は(n-1)/2個、偶数の場合はn/2個または(n/2)-1個）の要素を無視することができる。\r\n\r\n# プログラミング例\r\n```c\r\nint binary_search(int ary[], int key, int imin, int imax) {\r\n    if (imax < imin) {\r\n        return KEY_NOT_FOUND;\r\n    } else {\r\n        int imid = imin + (imax - imin) / 2;\r\n        if (ary[imid] > key) {\r\n            return binary_search(ary, key, imin, imid - 1);\r\n        } else if (ary[imid] < key) {\r\n            return binary_search(ary, key, imid + 1, imax);\r\n        } else {\r\n            return imid;\r\n        }\r\n    }\r\n}\r\n```',1,1,'2020-05-01 10:31:05','2020-05-07 12:54:00'),(18,'エラトステネスの篩','エラトステネスの篩 (エラトステネスのふるい、英: Sieve of Eratosthenes) は、指定された整数以下の全ての素数を発見するための単純なアルゴリズムである。古代ギリシアの科学者、エラトステネスが考案したとされるため、この名がある。',1,7,'2020-05-01 10:32:13','2020-05-01 10:32:13'),(19,'ユークリッドの互除法','ユークリッドの互除法（ユークリッドのごじょほう、英: Euclidean Algorithm）は、2 つの自然数の最大公約数を求める手法の一つである。\r\n\r\n2 つの自然数 a, b (a ≧ b) について、a の b による剰余を r とすると、 a と b との最大公約数は b と r との最大公約数に等しいという性質が成り立つ。この性質を利用して、 b を r で割った剰余、 除数 r をその剰余で割った剰余、と剰余を求める計算を逐次繰り返すと、剰余が 0 になった時の除数が a と b との最大公約数となる。',1,7,'2020-05-01 10:33:11','2020-05-01 10:33:11'),(20,'フェルマーの小定理','数論において、フェルマーの小定理（フェルマーのしょうていり、英: Fermat\'s little theorem）は素数の性質についての定理であり、実用としてもRSA暗号に応用されている定理である。',1,7,'2020-05-01 10:34:06','2020-05-01 10:34:06'),(21,'中国の剰余定理','中国の剰余定理（ちゅうごくのじょうよていり、英: Chinese remainder theorem）は、中国の算術書『孫子算経』に由来する整数の剰余に関する定理である。あるいは、それを一般化した可換環論における定理でもある。中国人の剰余定理（ちゅうごくじんのじょうよていり）、孫子の定理（そんしのていり、英: Sunzi\'s theorem）とも呼ばれる。\r\n\r\n『孫子算経』には、「3で割ると2余り、5で割ると3余り、7で割ると2余る数は何か」という問題とその解法が書かれている。中国の剰余定理は、この問題を他の整数についても適用できるように一般化したものである。',1,7,'2020-05-01 10:35:12','2020-05-01 10:35:12'),(22,'巡回セールスマン問題','巡回セールスマン問題（じゅんかいセールスマンもんだい、英: traveling salesman problem、TSP）は、都市の集合と各2都市間の移動コスト（たとえば距離）が与えられたとき、全ての都市をちょうど一度ずつ巡り出発地に戻る巡回路のうちで総移動コストが最小のものを求める（セールスマンが所定の複数の都市を1回だけ巡回する場合の最短経路を求める）組合せ最適化問題である。\r\n\r\n# 詳細\r\n問題例の大きさは、都市の数で表される。この問題は、計算複雑性理論においてNP困難と呼ばれる問題のクラスに属する。すなわち、問題例の大きさに関する決定性の多項式時間アルゴリズムが見つかりそうにない、計算量的に困難な問題である。なお、この問題の特殊ケースとして考えられるハミルトン閉路問題は、NP困難であると共にNP完全と呼ばれるクラスにも属するので、扱いが異なる。\r\n\r\n都市間の移動コストが三角不等式を満たす、すなわち移動コストを距離と呼べる部分問題（あるいは制約つき問題）も、NP困難である。都市を平面上の点、都市間の距離を平面上のユークリッド距離とする部分問題は最も直感的で理解しやすいが、これも NP困難である。この部分問題は平面TSPなどと呼ばれ、実用上の応用も多く、またベンチマークの問題例としても距離関数の定義が自明なため頻繁に現れる。 都市の間の移動コストを 1 または 2 に制限しても、この問題は NP困難である。ハミルトン閉路問題は、移動コストを 1 または無限大に制限した TSP とみなすことができる。\r\n\r\n一方で制約のない巡回セールスマン問題の直接の応用事例は無いと言ってもよい。逆に実際の応用事例では、より複雑な定義で配送計画や表面実装ロボットの動作計画などに適用される。',1,9,'2020-05-01 10:38:00','2020-05-07 13:41:18'),(23,'bit全探索','状態が2^n通りある問題に対して二進数をフラグに見立てる事で全探索をする方法です。',1,9,'2020-05-01 10:40:22','2020-05-01 10:40:22');
/*!40000 ALTER TABLE `articles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `categories` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (1,'探索','2020-04-30 02:59:50','2020-04-30 02:59:50'),(2,'ソート','2020-04-30 02:59:50','2020-04-30 02:59:50'),(3,'木構造','2020-04-30 02:59:50','2020-04-30 02:59:50'),(4,'動的計画法','2020-04-30 02:59:50','2020-04-30 02:59:50'),(5,'グラフ','2020-04-30 02:59:50','2020-04-30 02:59:50'),(6,'重み付きグラフ','2020-04-30 02:59:50','2020-04-30 02:59:50'),(7,'整数論','2020-04-30 02:59:50','2020-04-30 02:59:50'),(8,'累積和','2020-04-30 02:59:50','2020-04-30 02:59:50'),(9,'bit','2020-04-30 02:59:50','2020-04-30 02:59:50');
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problems`
--

DROP TABLE IF EXISTS `problems`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `problems` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `body` text NOT NULL,
  `link` varchar(255) DEFAULT NULL,
  `answer` text,
  `user_id` bigint NOT NULL,
  `article_id` bigint NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_problems_on_article_id` (`article_id`),
  KEY `index_problems_on_user_id` (`user_id`),
  CONSTRAINT `fk_rails_2efeab015c` FOREIGN KEY (`article_id`) REFERENCES `articles` (`id`),
  CONSTRAINT `fk_rails_b0b42588cb` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problems`
--

LOCK TABLES `problems` WRITE;
/*!40000 ALTER TABLE `problems` DISABLE KEYS */;
INSERT INTO `problems` VALUES (3,'最大和問題','n 個の整数 a[0],a[1],…,a[n−1] が与えられる。これらの整数から何個かの整数を選んで総和をとったときの、総和の最大値を求めよ。また、何も選ばない場合の総和は 0 であるものとする。\r\n\r\n【制約】\r\n・1≤n≤10000\r\n・−1000≤a[i]≤1000','https://qiita.com/drken/items/a5e6fe22863b7992efdb','#include <iostream>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\n// 入力\r\nint n;\r\nint a[10010];  // 最大10000個ですが、少しだけ多めにとります\r\n\r\n// DP テーブル\r\nint dp[10010];\r\n\r\n\r\nint main() {\r\n    cin >> n;\r\n    for (int i = 0; i < n; ++i) cin >> a[i];\r\n\r\n    dp[0] = 0;\r\n    for (int i = 0; i < n; ++i) {\r\n        dp[i + 1] = max(dp[i], dp[i] + a[i]);\r\n    }\r\n\r\n    cout << dp[n] << endl;\r\n}',1,4,'2020-05-01 05:40:18','2020-05-01 06:13:59'),(4,'部分和問題','n 個の正の整数 a[0],a[1],…,a[n−1] と正の整数 A が与えられる。これらの整数から何個かの整数を選んで総和が A になるようにすることが可能か判定せよ。可能ならば \"YES\" と出力し、不可能ならば \"NO\" と出力せよ。\r\n\r\n【制約】\r\n・1≤n≤100\r\n・1≤a[i]≤1000\r\n・1≤A≤10000','https://qiita.com/drken/items/a5e6fe22863b7992efdb','#include <iostream>\r\n#include <cstring>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\n// 入力\r\nint n, A;\r\nint a[110];\r\n\r\n// DPテーブル\r\nbool dp[110][10010];\r\n\r\nint main() {\r\n  cin >> n >> A;\r\n  for (int i = 0; i < n; ++i) cin >> a[i];\r\n\r\n  memset(dp, 0, sizeof(dp));   // 一旦すべて false に\r\n  dp[0][0] = true;             // dp[0][0] だけ true に\r\n\r\n  for (int i = 0; i < n; ++i) {\r\n    for (int j = 0; j <= A; ++j) {\r\n      dp[i+1][j] |= dp[i][j];\r\n      if (j >= a[i]) dp[i+1][j] |= dp[i][j-a[i]];\r\n    }\r\n  }\r\n\r\n  if (dp[n][A]) cout << \"YES\" << endl;\r\n  else cout << \"NO\" << endl;\r\n}',1,5,'2020-05-01 05:43:59','2020-05-01 06:12:21'),(5,'最長共通部分列 (LCS) 問題','2つの文字列 S, T が与えられる。\"abcde\" といった文字列の部分文字列とは、\"a\", \"ad\", \"abe\" といったように、文字列から文字を幾つか抜き出して順に繋げてできる文字列のことを言うものとする。このとき、S と Tの共通の部分文字列となる文字列の長さの最大値を求めよ。','https://qiita.com/drken/items/a5e6fe22863b7992efdb','#include <iostream>\r\n#include <cstring>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\nconst int INF = 1<<29;        // 十分大きい値にする\r\n\r\n// 入力\r\nstring S, T;\r\n\r\n// DP テーブル\r\nint dp[1010][1010];\r\n\r\nint main() {\r\n  cin >> S >> T;\r\n\r\n  memset(dp, 0, sizeof(dp));    // 初期化\r\n  for (int i = 0; i < S.size(); ++i) {\r\n    for (int j = 0; j < T.size(); ++j) {\r\n      if (S[i] == T[j]) dp[i+1][j+1] = max(dp[i+1][j+1], dp[i][j] + 1);\r\n      dp[i+1][j+1] = max(dp[i+1][j+1], dp[i+1][j]);\r\n      dp[i+1][j+1] = max(dp[i+1][j+1], dp[i][j+1]);\r\n    }\r\n  }\r\n\r\n  cout << dp[S.size()][T.size()] << endl;\r\n}',1,6,'2020-05-01 06:22:38','2020-05-01 06:22:38'),(6,'レーベンシュタイン距離 (diffコマンド)','2つの文字列 S, T が与えられます。S に以下の3種類の操作のいずれかを順次実施して TT に変換したいです。そのような一連の操作のうち、操作回数の最小値を求めよ。\r\n\r\n(操作)\r\n＜変更＞ Sの中から文字S[ i ]を1個選んで、その文字を好きな文字に変更します。\r\n＜削除＞ Sの中から文字S[ i ]を1個選んで、その文字を削除します。削除によって空文字列になることも許容します。\r\n＜挿入＞ Sの好きな箇所に好きな文字を挿入します。特に、Sの先頭や最後尾に文字を追加することもできます。\r\n\r\n【制約】\r\n・1≤|S|,|T|≤1000','https://qiita.com/drken/items/a5e6fe22863b7992efdb','#include <iostream>\r\n#include <cstring>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\nconst int INF = 1<<29;        // 十分大きい値にする\r\n\r\n// 入力\r\nint n, m;\r\nstring S, T;\r\n\r\n// DP テーブル\r\nint dp[1010][1010];\r\n\r\nint main() {\r\n  cin >> n >> m >> S >> T;\r\n\r\n  // 初期化\r\n  for (int i = 0; i < 1010; ++i) for (int j = 0; j < 1010; ++j) dp[i][j] = INF;\r\n  dp[0][0] = 0;\r\n\r\n  for (int i = -1; i < (int)S.size(); ++i) {\r\n    for (int j = -1; j < (int)T.size(); ++j) {\r\n      if (i == -1 && j == -1) continue;   // dp[0][0] は考慮済\r\n      if (i >= 0 && j >= 0) {\r\n        if (S[i] == T[j]) dp[i+1][j+1] = min(dp[i+1][j+1], dp[i][j]);\r\n        else dp[i+1][j+1] = min(dp[i+1][j+1], dp[i][j] + 1);\r\n      }\r\n      if (i >= 0) dp[i+1][j+1] = min(dp[i+1][j+1], dp[i][j+1] + 1);\r\n      if (j >= 0) dp[i+1][j+1] = min(dp[i+1][j+1], dp[i+1][j] + 1);\r\n    }\r\n  }\r\n\r\n  cout << dp[S.size()][T.size()] << endl;\r\n}',1,7,'2020-05-01 06:25:47','2020-05-01 06:25:47'),(7,'Many Requirements','・1≤A1≤A2≤⋯≤AN≤M\r\nという条件を満たす長さ N の数列 A1,…,AN を考える。そのうち、以下のようにして定まるスコアの最大値を求めよ。\r\n\r\nスコアは、Q 個の条件のうち、満たすものについて加算されていく。\r\n\r\n・i 個目の条件は、4 つの整数 ai,bi,ci,di で与えられる\r\n・数列 A が、Abi−Aai=ci を満たすならば、スコアに di が加算される\r\n\r\n制約\r\n・N,M≤10\r\n・Q≤50\r\n・1≤ai<bi≤M','https://atcoder.jp/contests/abc165/tasks/abc165_c','#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// 入力\r\nint N, M, Q;\r\nvector<long long> a, b, c, d;\r\n\r\n// 数列 A のスコアを計算\r\nlong long score(const vector<int> &A) {\r\n    long long res = 0;\r\n    for (int i = 0; i < Q; ++i) if (A[b[i]] - A[a[i]] == c[i]) res += d[i];\r\n    return res;\r\n}\r\n\r\n// 数列 A に要素を付け加えて行って、最終的にできる数列のうちの\r\n// スコアの最大値を返す\r\n// 特に、最初の呼出しに対する返り値が答え\r\nlong long dfs(vector<int> &A) {\r\n    if (A.size() == N) {\r\n        return score(A);\r\n    }\r\n    long long res = 0;\r\n    int prev_last = (A.empty() ? 0 : A.back());\r\n    for (int add = prev_last; add < M; ++add) {\r\n        A.push_back(add);\r\n        res = max(res, dfs(A)); // 再帰呼出しながら、スコア最大値を更新\r\n        A.pop_back();\r\n    }\r\n    return res;\r\n}\r\n\r\nint main() {\r\n    cin >> N >> M >> Q;\r\n    a.resize(Q); b.resize(Q); c.resize(Q); d.resize(Q);\r\n    for (int q = 0; q < Q; ++q) {\r\n        cin >> a[q] >> b[q] >> c[q] >> d[q];\r\n        --a[q], --b[q];\r\n    }\r\n    vector<int> A;\r\n    cout << dfs(A) << endl;\r\n}',2,9,'2020-05-04 11:43:28','2020-05-04 11:43:28');
/*!40000 ALTER TABLE `problems` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schema_migrations`
--

DROP TABLE IF EXISTS `schema_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `schema_migrations` (
  `version` varchar(255) NOT NULL,
  PRIMARY KEY (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schema_migrations`
--

LOCK TABLES `schema_migrations` WRITE;
/*!40000 ALTER TABLE `schema_migrations` DISABLE KEYS */;
INSERT INTO `schema_migrations` VALUES ('20200430003212'),('20200430010658'),('20200430024553'),('20200430031032'),('20200430031638'),('20200430043616'),('20200430092610'),('20200504111130'),('20200504111530');
/*!40000 ALTER TABLE `schema_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password_digest` varchar(255) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'和泉匠','takumi221b4869@gmail.com','$2a$12$IXr8pC7G/Z.dHYSpppQYo.piMkEEh3RvbvT.MO7SRpjP9f3jUTmqy','2020-04-30 02:14:35','2020-04-30 02:14:35'),(2,'山田太郎','yamadataro221b4869@gmail.com','$2a$12$asA/K86kvhHgKzmtatg9LuJgutfL3YYa81vLQkVYwFN2TfHifP.SC','2020-04-30 06:11:33','2020-04-30 06:11:33');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-05-10 16:24:21
